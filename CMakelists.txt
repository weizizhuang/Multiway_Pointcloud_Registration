cmake_minimum_required( VERSION 3.1.2 )
project(UrbanReg)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/CMake")
message(${CMAKE_MODULE_PATH})
set(URBANREG_EXTERNAL "${PROJECT_SOURCE_DIR}/external")
set(VS_EXTERNAL "external")
option(WITH_RPLY		"Use RPly"			ON)
option(USE_KDTREE		"Use k-d tree"		ON)
option(FLANN_USE_STATIC "Use static FLANN"	ON)
option(USE_VIEWER		"Use viewer"		OFF)

### Compilation flags: adapt to your needs ###
if(MSVC)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /bigobj") ### Enable parallel compilation
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR} )
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR} )
else()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") #### eigen requires a modern C++ compiler that supports c++11
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "../" )
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations -Wno-unused-parameter -Wno-deprecated-register -Wno-return-type-c-linkage")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-deprecated-declarations -Wno-unused-parameter -Wno-deprecated-register -Wno-return-type-c-linkage")
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

FIND_PACKAGE(OpenMP REQUIRED)
if(OPENMP_FOUND)
	message("OPENMP FOUND")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

find_package(Eigen3 REQUIRED)
if(EIGEN3_FOUND)
	include_directories(${EIGEN3_INCLUDE_DIR})
else()
	message(STATUS "NOTICE: Eigen library is not found.") 
endif()

set(LIBIGL_ROOT_DIR "C:/Users/admin/Desktop/libigl-master")
if(NOT LIBIGL_ROOT_DIR)
	message(FATAL_ERROR "Please point the environment variable LIBIGL_ROOT to the include directory of your libigl installation.")
else()
	include_directories("${LIBIGL_ROOT_DIR}/include")
endif()

find_package(FLANN REQUIRED)

if(USE_KDTREE)
	set(KDTREE_DIR ${URBANREG_EXTERNAL}/kdtree)
	add_library(kdtree STATIC ${KDTREE_DIR}/kdtree.h ${KDTREE_DIR}/kdtree.c)
	set_target_properties(kdtree PROPERTIES FOLDER ${VS_EXTERNAL})
else()
	message(FATAL_ERROR "Please git recursively to download kdtree!")
endif()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(URBANREG_RUNTIME_DIR ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${URBANREG_RUNTIME_DIR}/Debug)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${URBANREG_RUNTIME_DIR}/Release)

MESSAGE("ARCHIVE OUTPUT DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
MESSAGE("LIBRARY OUTPUT DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
MESSAGE("RUNTIME OUTPUT DIRECTORY ${URBANREG_RUNTIME_DIR}")

#set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

set(SSICP_DIR "${PROJECT_SOURCE_DIR}/ScaleStretchICP/")
set(ICPTESTER_DIR "${PROJECT_SOURCE_DIR}/ICPTester/")
set(GPSLOC_DIR "${PROJECT_SOURCE_DIR}/GPSLocalizer/")
set(OVERLAPTRIMMER_DIR "${PROJECT_SOURCE_DIR}/OverlapTrimmer/")
set(REGPIPELINE_DIR "${PROJECT_SOURCE_DIR}/RegistrationPipeline/")
set(DATAIO_DIR "${PROJECT_SOURCE_DIR}/DataIO/")
set(REGEXAMPLE_DIR "${PROJECT_SOURCE_DIR}/RegistrationExample/")
set(VIEWEREXAMPLE_DIR "${PROJECT_SOURCE_DIR}/ViewerExample/")
set(FEATUREALG_DIR "${PROJECT_SOURCE_DIR}/FeatureAlg/")
set(FGR_DIR "${PROJECT_SOURCE_DIR}/FastGlobalRegistration/")
set(GOICP_DIR "${PROJECT_SOURCE_DIR}/GoICP/")
set(BASEALG_DIR "${PROJECT_SOURCE_DIR}/BaseAlg/")

add_subdirectory(${SSICP_DIR})
add_subdirectory(${ICPTESTER_DIR})
add_subdirectory(${GPSLOC_DIR})
add_subdirectory(${OVERLAPTRIMMER_DIR})
add_subdirectory(${REGPIPELINE_DIR})
add_subdirectory(${DATAIO_DIR})
add_subdirectory(${FEATUREALG_DIR})
add_subdirectory(${REGEXAMPLE_DIR})
add_subdirectory(${FGR_DIR})
add_subdirectory(${GOICP_DIR})
add_subdirectory(${BASEALG_DIR})
if(USE_VIEWER)
	add_subdirectory(${VIEWEREXAMPLE_DIR})
endif()